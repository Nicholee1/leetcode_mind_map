{
	"nodes":[
		{"id":"9c81b642bee0b4f4","type":"text","text":"回溯","x":-500,"y":-246,"width":99,"height":60},
		{"id":"405c431777f7b927","type":"text","text":"Template：\n```python\ndef backTracking(path, choice_list):\n    if(meet finish condition): #终止条件\n        result.add(path)\n        return\n\n    for(choice in choice_list): #选择列表\n        make a choice\n        backTracking(path, choice_list) # 选择路径\n        undo the choice\n```","x":-340,"y":-400,"width":520,"height":328},
		{"id":"924f0b7940f27e13","type":"text","text":"二分搜索","x":-516,"y":-40,"width":131,"height":60},
		{"id":"719fe8835458f3a2","type":"text","text":"Template：\n```java\nint binarySearch(int[] nums, int target){\n\tint left=0, right=nums.length-1;\n\twhile(left<=right){\n\t\tint mid=left+(right-left)/2;\n\t\tif(nums[mid]==target){\n\t\t\treturn mid;\n\t\t}else if(nums[mid]<target){\n\t\t\tleft=mid+1;\n\t\t}else if(nums[mid]>target){\n\t\t\tright=mid-1;\n\t\t}\n\t}\n\treturn -1;\n}\n```","x":-330,"y":-40,"width":510,"height":395},
		{"id":"70866038af80733a","type":"text","text":"二叉树","x":-516,"y":400,"width":115,"height":60},
		{"id":"6098a322c357c4a0","type":"text","text":"前序获取父节点信息","x":-330,"y":400,"width":211,"height":60},
		{"id":"ab18724322ff0deb","type":"text","text":"遍历二叉树得到答案（回溯）","x":-75,"y":400,"width":305,"height":60},
		{"id":"7ae7ca3e114de40e","type":"text","text":"后序利用好**返回值**获取子树返回的信息","x":-330,"y":580,"width":339,"height":50},
		{"id":"cb876d74abb2b5eb","type":"text","text":"中序处理BST问题","x":-330,"y":500,"width":193,"height":50},
		{"id":"8b002b0cfda44b53","type":"text","text":"拆解问题得到答案（动态规划）","x":39,"y":580,"width":283,"height":50},
		{"id":"f7b45ac031a9bd60","type":"text","text":"BST中序获取有序数组","x":-47,"y":495,"width":250,"height":60},
		{"id":"6ddcd031d61f4d0b","type":"text","text":"算法题思维导图","x":-900,"y":200,"width":180,"height":60},
		{"id":"4df63548f8dcc255","type":"text","text":"二叉树构造","x":-326,"y":700,"width":147,"height":60},
		{"id":"6218f59ed823ac20","type":"text","text":"前序+中序","x":-116,"y":700,"width":141,"height":60},
		{"id":"4b2ea63f7734a1cd","type":"text","text":"中序+后序","x":-116,"y":800,"width":141,"height":60},
		{"id":"b2076240e2f2a784","type":"text","text":"前序+后序","x":-116,"y":970,"width":141,"height":50},
		{"id":"4d6e11e191577890","type":"text","text":"排序","x":-504,"y":2510,"width":99,"height":60},
		{"id":"e4644c22c03737b7","type":"text","text":"插入排序","x":-336,"y":2550,"width":131,"height":60},
		{"id":"b9e263537a54dd38","type":"text","text":"归并排序","x":-336,"y":2671,"width":131,"height":60},
		{"id":"b7c0588019625296","type":"text","text":"快速排序","x":-336,"y":2790,"width":131,"height":60},
		{"id":"4fdf4c9499f5eacb","type":"text","text":"冒泡排序","x":-336,"y":2350,"width":131,"height":60},
		{"id":"8ccdf64b87d5311f","type":"text","text":"选择排序","x":-336,"y":2450,"width":131,"height":60},
		{"id":"3bada3d47fd37c03","type":"text","text":"链表","x":-504,"y":1870,"width":99,"height":60},
		{"id":"e112bac8f2492cc4","type":"text","text":"* 双层循环，内部每次循环前n-i个，两两比较交换，这样每次都会将一个最大的放到最后","x":-63,"y":2355,"width":795,"height":50},
		{"id":"06be2646f78aa93e","type":"text","text":"双层循环，每次循环选择一个最大/最小的放到最后/最前面的位置","x":-63,"y":2450,"width":624,"height":60},
		{"id":"5d5419f01eeb8e8d","type":"text","text":"双层循环，每次循环默认前i个已经有序，将第i个元素在前i个中从后向前找插入的位置","x":-63,"y":2550,"width":715,"height":60},
		{"id":"cf049d5dce67725a","type":"text","text":"二叉树后序思想，不断二分数组递归调用，后序位置merge两个有序数组. 一个全局的tmp列表用于临时存储数据，merge时先对范围内的数据传到tmp上，然后三个指针分别指向两个left，mid+1，left。用tmp里面的数据对比后存入num数组中","x":-63,"y":2671,"width":943,"height":60},
		{"id":"96a8edde13b2e89c","type":"text","text":"* 删除倒数第n个节点，快指针先走n步 [19. Remove Nth Node From End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n*   判断链表有没有环，快慢指针二倍速终会相遇 [141. Linked List Cycle](https://leetcode.com/problems/linked-list-cycle/)\n*  找到环的起点，当快慢指针相遇时一个指针回到起点，再次相遇[142. Linked List Cycle II](https://leetcode.com/problems/linked-list-cycle-ii/)\n* 判断两个链表是否相交，a走完走b，b走完走a，相等即是交点 [160. Intersection of Two Linked Lists](https://leetcode.com/problems/intersection-of-two-linked-lists/)\n* 排序链表：[148. Sort List](https://leetcode.com/problems/sort-list/) 归并排序，终止条件是空指针或仅剩一个节点。每次先快慢指针找到链表中点，快指针要先移到下一个点。并且每次找到中点后进行mid.next的**断链**。然后后序位置对递归的结果进行合并。","x":-63,"y":1900,"width":863,"height":200},
		{"id":"55ac72c0d6e19ed7","type":"text","text":"双指针","x":-310,"y":1840,"width":115,"height":60},
		{"id":"d4d04856de282053","type":"text","text":"快慢指针","x":-318,"y":1950,"width":131,"height":60},
		{"id":"c8a37c6374427920","type":"text","text":"左右指针","x":-318,"y":2070,"width":131,"height":60},
		{"id":"b1d6f334c73e78c6","type":"text","text":"递归","x":-320,"y":2190,"width":99,"height":60},
		{"id":"f5b2827293468258","type":"text","text":"层序遍历","x":-330,"y":1210,"width":131,"height":60},
		{"id":"adfb2dcd0eb1cd31","type":"text","text":"``` java\nvoid sort(int[] nums,int lo, int hi){\n\tif(lo== hi) return\n\t int mid= (lo+hi)/2\n\t sort(nums,lo,mid)\n\t sort(nums.mid+1,hi)\n\t merge(nums,lo,mid,hi)\t\n}\n```\n","x":980,"y":2592,"width":388,"height":219},
		{"id":"2355c0d12239abbf","type":"text","text":"递归","x":-314,"y":1360,"width":99,"height":60},
		{"id":"b35a70dc083c6c61","type":"text","text":"* 验证是否是BST树[98. Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/) 一个long型pre记录前一个值，中序遍历，pre应该一直比root的值小\n* 中序遍历 [94. Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/)\n* 第k个最小值在BST树[230. Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)限定是BST树，中序遍历即可","x":406,"y":320,"width":758,"height":125},
		{"id":"3bf105c8d7694a72","type":"text","text":"* [101. Symmetric Tree](https://leetcode.com/problems/symmetric-tree/)判断树是不是对称的，就是判断左右子树是不是对称的，以左右节点为参数构建辅助函数isSym(left,right),  isSym(left.left,right.right)&&isSym(left.right,right.left)都为真是才是对称的\n* **%路径和**[437. Path Sum III](https://leetcode.com/problems/path-sum-iii/) 找出树中所有和为sum的可能。拆解问题，所有可能就是包含root节点的可能+包含左右子节点的可能,这里左右子节点必须是父函数，否则只能探测到紧挨着根节点的左右子树。针对某一个节点开始的可能数量，则是自身等于target的count+左子树等于target- root.val的count+右子树等于target- root.val的count","x":313,"y":1420,"width":633,"height":220},
		{"id":"0d899fd56e77b87f","type":"text","text":"``` java\nvoid traverse (TreeNode root)}{\n\tif(root==null) return;\n\tqueue=new LinkList<TreeNode>();\n\tqueue.add(root);\n\twhile(!queue.isEmpty()){\n\t\tsize=queue.size()\n\t\tfor(int i=0;i<size;++i){\n\t\t\tnode=queue.poll()\n\t\t\tif(!node.left==null){\n\t\t\t\tqueue.add(node.left)\n\t\t\t}\n\t\t\tif(!node.right==null){\n\t\t\t\tqueue.add(node.right)\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n```\n","x":1020,"y":1180,"width":668,"height":460},
		{"id":"34e79651438ad19b","type":"text","text":"map存储后序值和索引，用来计算边界leftSize=index-postStart+1;\npreStart>preEnd 作为终止条件\n根节点创建后，*还需用前序第二个元素作为左子树根节点* 左右节点分别为\nroo.left=build(preorder,preStart+1,preStart+leftSize,postorder,postStart,index)\nbuild(preorder,preStart+leftSize+1,preEnd,postorder,jndex+1,postEnd-1)","x":313,"y":1130,"width":668,"height":160},
		{"id":"0e95b946d2ed4a34","type":"text","text":"map存储中序值和索引，用来计算边界leftSize=index-instart\ninStart>inEnd 作为终止条件\n根节点创建后，左右节点分别为\nroo.left=build(inorder,inStart,index-1,postorder,postStart,postStart+leftSize-1)\nbuild(inorder,index+1,inEnd,postorder,postStart+leftSize,postEnd-1)","x":313,"y":950,"width":668,"height":140},
		{"id":"e3281db52425f113","type":"text","text":"* 反转二叉树 [226. Invert Binary Tree](https://leetcode.com/problems/invert-binary-tree/) 利用好返回值，后序位置每个节点左右子树对调\n* 树的深度[104. Maximum Depth of Binary Tree](https://leetcode.com/problems/maximum-depth-of-binary-tree/)  return Math.max(left,right)+1\n*  **拉平二叉树成链表** [114. Flatten Binary Tree to Linked List](https://leetcode.com/problems/flatten-binary-tree-to-linked-list/) 由于拉成右节点连接，所以要按照右节点，根，左节点顺序连接，需要调转左右子树遍历顺序，然后维护一个全局的pre初始为空记录上一个被连接的节点，在后序位置root.left=null/root.right=pre/pre=root\n* **最近公共祖先**：[236. Lowest Common Ancestor of a Binary Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/) 就是找某个root节点它的左右子树是否包含了给定的两个值。在前序位置，如果值相等直接返回，覆盖了根节点就是给定值的情况。在后序位置，递归的左右子树都不为空，则返回root，即是祖先。否则就返回左子树或右子树.\n* 二叉树中的最长距离：[543. Diameter of Binary Tree](https://leetcode.com/problems/diameter-of-binary-tree/)利用树的深度，在深度计算的代码中，在后序位置比较maxLength和left+right中最大的，因为left和right已经是左右子树各自的最长距离了","x":436,"y":460,"width":784,"height":320},
		{"id":"39cba020edf3935e","type":"text","text":"map存储中序值和索引，用来计算边界leftSize=index-instart\npreStart>preEnd 作为终止条件\n根节点创建后，左右节点分别为\nroot.left=build(preorder,preStart+1,preStart+leftSize,inorder,inStart,index-1)\nroot.right=build(preorder,preStart+leftSize+1,preEnd,inorder,index+1,inEnd)","x":313,"y":790,"width":668,"height":140},
		{"id":"e6045e5226785de2","type":"text","text":"* 寻找target应该存在列表中的位置[35. Search Insert Position](https://leetcode.com/problems/search-insert-position/)比较常规的二分搜索\n* 找到旋转数组中的最小值[153. Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)用最后一个值进行二分判断，注意边界，nums[mid]<=nums[length-1]时，right=mid避免把最小值过滤出去了，大于时则可以安心left=mid+1，while条件是left < right避免死循环\n* 在一个旋转数组中搜索[33. Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/) 有序数组被旋转过一次，在这种数组里搜索一个元素。主要思路是用数组最后一个元素二分搜索找出最小值的位置（153.），这样就切开了两个单调有序的数组，然后target如果大于等于最后一个值就在前边的数组找，小于就在后边的数组找\n* 有序数组找target的左右边界 [34. Find First and Last Position of Element in Sorted Array](https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/) 二分搜索的nums[mid]== target条件中用两个指针探测边界即可\n* 在有序二维数组中搜索target[74. Search a 2D Matrix](https://leetcode.com/problems/search-a-2d-matrix/) 先对第一列进行二分，找到对应行后再横向二分搜索，注意！！！！while(left<right)和**left=mid搭配时需要向上取整**，也就是mid=left+(right-left+1)/2;\n","x":624,"y":-400,"width":540,"height":520},
		{"id":"56d9935afa31d732","type":"text","text":"* 合并双链表，拉链法，注意dummy头节点预防空指针[21. Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)\n* 合并K个链表，借助最小堆存放k个链表的头 [23. Merge k Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/)\n* 相加两个链表的值[2. Add Two Numbers](https://leetcode.com/problems/add-two-numbers/) 要考虑进位的问题，所以有一个int型的carry记录进位情况。主要需要注意双指针的判空\n* 带随机指针的链表深拷贝[138. Copy List with Random Pointer](https://leetcode.com/problems/copy-list-with-random-pointer/) 链表的完全深拷贝，但是每个节点都有一个随机指针。使用map存储每一个节点和new出来的新节点。然后根据map再循环一遍，这样每次的随机random也能找到对应的指向","x":-63,"y":1640,"width":682,"height":230},
		{"id":"87803353733412dd","type":"text","text":"* 手机数字建枚举[17. Letter Combinations of a Phone Number](https://leetcode.com/problems/letter-combinations-of-a-phone-number/)一个list维护数字键的对应关系，套用模板，对每一个数字键进行枚举\n* 枚举括号[22. Generate Parentheses](https://leetcode.com/problems/generate-parentheses/) 除了枚举，还需要满足括号的规则，所以需要剪枝，右括号不能出现在左括号前。所以需要两个变量left right记录左右括号使用情况\n* 候选数组能够拼凑target的所有结果[39. Combination Sum](https://leetcode.com/problems/combination-sum/)数字可以重用，所以选择列表每次从i=index本身算起，注意剪枝以及返回list时深拷贝结果，否则引用的list会持续被修改\n* 全排列[46. Permutations](https://leetcode.com/problems/permutations/)数组的全排列，因为是全排列，所以每个元素都可能出现在任一位置上，所以需要一个**used[i]数组**记录有没有使用过，boolean used[n]默认就都是false的\n* 全子集[78. Subsets](https://leetcode.com/problems/subsets/)与全排列不同，只要求子集，所以会更贴切模板，添加结果要在终止条件之前，for循环从index开始，但注意选择路径时用i+1而不是index+1\n* 单词搜索[79. Word Search](https://leetcode.com/problems/word-search/)很恶心，上下左右遍历，重要一点不能走回头路，所以要对刚走的值进行修改，以免走回去。\n* **%找出所有回文的子串**[131. Palindrome Partitioning](https://leetcode.com/problems/palindrome-partitioning/) 由于每组返回结果都是一组子串，所以当index== s.length时，一块返回一个List<String>, 回溯时，先判断**index到i是不是回文**，如果是，就把s.substring(index,i+1)存入结果，然后回溯判断，回溯完记得删除最后的元素","x":225,"y":-1040,"width":735,"height":574},
		{"id":"f6134d84ee6fd4c6","type":"text","text":"private void quickSort(int[] nums, int left, int right) {\n    if (left>=right) return;\n    int cur = left + 1;                   // 从左侧第二个元素开始\n    int lo = left;                        // 分界点为第一个元素\n    while (cur <= right) {\n        if (nums[cur] <= nums[left]) {    // 交换位置保证lo的左侧都是小于num[left]\n            swap(nums, lo+1, cur);\n            lo ++;\n        }\n        cur++;\n    }\n    swap(nums, left, lo);                 // 把分界点元素移动到新的分界位置\n    quickSort(nums, left, lo-1);\n    quickSort(nums, lo+1, right);\n}","x":1160,"y":2880,"width":1040,"height":400},
		{"id":"50dd33ee76d0007c","type":"text","text":"* 反转链表，递归一直返回最后一个节点作为头指针，依次反转 [206. Reverse Linked List](https://leetcode.com/problems/reverse-linked-list/)\n* **%反转部分链表**，一个suss标注反转部分的下一个节点，head.next从指空改成指suss [92. Reverse Linked List II](https://leetcode.com/problems/reverse-linked-list-ii/)\n* 判断链表是否回文，递归就是栈，一个全局的指针从头开始走，递归方法到最后开始判断，之前的返回值是true和当前层与全局指针值相等就是回文[234. Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list/)\n* **成对的转换节点**[24. Swap Nodes in Pairs](https://leetcode.com/problems/swap-nodes-in-pairs/) 每两个节点转换，最后返回这个链表。递归调用时传入的是head.next.next来跳对。返回值是每一对转换后的头节点，所以需要一个p指针指向head.next, p.next=head;head.next=node; return p","x":-63,"y":2110,"width":995,"height":220},
		{"id":"71cadbb9d498ac4c","type":"text","text":"二叉树前序思想，选取pivot，对数组排序，使得左边都比pivot小，右边都比它大，可以二分出一个pivot并在比较前交换到left位置，然后双指针一个遍历，一个记录比pivot大的元素的第一个位置，比较后再将left位置和这个指针的值调回来，返回pivot的位置，再左右递归调用函数拆解排序","x":-63,"y":2752,"width":995,"height":98},
		{"id":"2da5691f54cf39a0","type":"text","text":"动态规划","x":-1280,"y":-400,"width":144,"height":50},
		{"id":"4ca0d635f3f84ad8","type":"text","text":"* 跳跃游戏[55. Jump Game](https://leetcode.com/problems/jump-game/) 可以沿用动态规划的思想，pre代表可以跳跃的最大距离。base 0位置就是nums【0】，状态转移就是````\npre=Math.max(pre,i+nums[i]);,前一位可跳位置和当前能跳的最远距离。当然，需要确保前面可以跳到这来，也就是pre >当前位置。\n* **跳跃游戏2**：[45. Jump Game II](https://leetcode.com/problems/jump-game-ii/) 需要从判断能不能走到最后改成返回走到最后的最小步数。所以需要加个变量维护当前步骤内能走到的最远距离cur，和原先的最大距离maxDic，当cur== i 时说明不得不加一步了。加一步后再把maxDic替换给cur。\n* 买股票的最佳时机[121. Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)  顺序遍历，记录最小值，同时计算当前值和当前记录最小值的差额，最大的即是结果。\n* **划分字符区间**[763. Partition Labels](https://leetcode.com/problems/partition-labels/)： 返回一个长度划分的list，保证每个字母只在一个区间内出现 。先用list统计 每个字符出现的最后位置。然后再二次遍历这个list，用一个变量维护遍历过程中每个字符出现位置的最大值，当val== i的时候，说明有字符已经不得不分割了，就把结果存入，以此类推。\n","x":-2740,"y":65,"width":1014,"height":330},
		{"id":"1374fd460d1c5fd9","type":"text","text":"贪心","x":-1280,"y":150,"width":112,"height":50},
		{"id":"333eff538c6562bc","type":"text","text":"双指针","x":-1303,"y":545,"width":158,"height":60},
		{"id":"125f5762ffe49278","type":"text","text":"* 3数之和：建立在两数之和之上。首先对数组进行排序，然后对每个nums【i】，找有没有和为-nums【i】的结果。两数之和就是有序数组上的双指针。注意剪枝，如如果数字有正负，那么排序后，数字大于0的就不用找了。 两数之和里，如果相等了，需要把和当前两个相等的都剪枝。 如果不能，在移动左右指针时，也是需要将相等的都剪枝出去。\n* 盛水最多的容器[11. Container With Most Water](https://leetcode.com/problems/container-with-most-water/)：一串数字代表高度。 左右指针，每次算面积，保留最大值，然后移动更短的那一条指针\n* 最长无重复子串[3. Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/)： 滑动窗口，一个map维护窗口内有没有这个字符，不断移动双指针，找出最长无重复子串\n*  找到字符串中所有字母的异位词[438. Find All Anagrams in a String](https://leetcode.com/problems/find-all-anagrams-in-a-string/)： 一个字符串去另一个字符串中找有没有跟他字母长度都一样，只有顺序不一样的结果。先存储两个字符串前代匹配字符串长度的各个字符出现的次数，也就是26长的int【】，然后每次减小一个位置，增加后一个位置，再依次比较\n* 移动零[283. Move Zeroes](https://leetcode.com/problems/move-zeroes/) 思路就是如果你把所有非0值都移到前面了，那么剩下的自然就是0了。快慢指针，快指针非0，就和慢指针交换值，慢指针++；","x":-2760,"y":460,"width":1054,"height":340},
		{"id":"1e5f0cafd82fa973","type":"text","text":"哈希","x":-1277,"y":870,"width":106,"height":60},
		{"id":"95882fa23ac218a8","type":"text","text":"* 单词分组  [49. Group Anagrams](https://leetcode.com/problems/group-anagrams/)，相同字母的字符串放到一个list里。运用hash ``Map<String, List<String>> map`` , 对每个字符串排序后，存入对应的队列，\n* **最长连续序列**： [128. Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/)  找出一串数字中最长的连续序列。set存储所有数字。然后遍历这个set。而且只从set没有num-1的情况开始计算，因为这样会最长。\n* **%找出所有子数组和为k**[560. Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/) 由于数组里有正有负，所以不能用滑动窗口，所以先求出前缀和，并同时将前缀和存入map中，value是出现的次数,map需要一个默认值（0，1）用来比较最前的prefix，同时判断sum【i】-k的值有几个，就代表能有几个子数组。\n* ","x":-2760,"y":900,"width":1056,"height":248},
		{"id":"e27bfca1c9854b1c","type":"text","text":"技巧","x":-1277,"y":1240,"width":155,"height":50},
		{"id":"9f73434033420921","type":"text","text":"* 合并区间[56. Merge Intervals](https://leetcode.com/problems/merge-intervals/)： 若干个区间块进行合并，重叠的合并在一起。 先对区间块进行正序排列，然后遍历区间块，当前结果集为空或者最后一个结果的末位要大于等于当前区间块的头部，那么就可以合并。否则直接存入结果集\n* **轮转数组**[189. Rotate Array](https://leetcode.com/problems/rotate-array/)：将数组向右轮转k个位置，即[1,2,3,4,5]->[4,5,1,2,3]。 先调转整个数组，[5,4,3,2,1].再调转前k个， 【4，5，3，2，1】。再调转后面的，【4，5，1，2，3】.注意k 可能超过数组长度，所以要预先取模\n* **除自身以外数组的乘积**[238. Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)，维护 两个数组，一个记录从0到i-1的每次的乘积，一个记录i+1到最后的乘积，这样通过这两个数组就可以得出每个位置除自身以外的乘积。\n* **寻找重复数**[287. Find the Duplicate Number](https://leetcode.com/problems/find-the-duplicate-number/)：1～n+1的范围内存在着1～n个数字，那么肯定会有一个重复的。找出重复的数。二分思路，对1，n-1进行二分，也就是n/2向下取整，并统计所有小于等于mid元素。当个数严格大于mid时，说明肯定有重复的，right=mid继续查找。否则肯定不是mid，left=mid+1\n* **下一个排列** [31. Next Permutation](https://leetcode.com/problems/next-permutation/) 返回数字的下一个排列1373842-》1374238。恶心。主要知道规则，首先要倒序找挨着的两个正序的数，如果没有，说明整体是降序的，直接翻转即可。然后倒序找有没有比i大的，如果有，互换，然后再对i+1区域正序排列。\n* **最大子数组和**[53. Maximum Subarray](https://leetcode.com/problems/maximum-subarray/) 求和最大子数组，有正有负，使用前缀和，转换为买股票的最佳时机，记录最小值，同时记录当前前缀和和最小值的差额。注意最小值初始化为0，可以包含第一个前缀和，否则初始化为第一个前缀和然后下标从1开始就会默认不带第一个值。\n* **%颜色排序**[75. Sort Colors](https://leetcode.com/problems/sort-colors/) ：荷兰国旗问题，一组0，1，2按照顺序排列。l指向0的位置，r指向2的位置，idx进行遍历。nums[idx] 是0时与l互换后都++，是2时跟r互换后，只有r--，因为不知道换过来的是什么。是1时直接idx++；\n* 只出现一次的数字 [136. Single Number](https://leetcode.com/problems/single-number/) 一个数组里只有一个数字出现了一次，安位异或（res^=num），剩下的值就是单个的","x":-2760,"y":1210,"width":1061,"height":520},
		{"id":"ba83179a6667600a","type":"text","text":"栈/堆","x":-1227,"y":1730,"width":105,"height":50},
		{"id":"6d71db626df514d7","type":"text","text":"* 有效的括号[20. Valid Parentheses](https://leetcode.com/problems/valid-parentheses/)： 利用一个map维护不同种类括号之间的对应关系，右括号作为key，左括号作为value。然后用栈进行遍历，左括号直接进。否则如果是右括号，栈顶的元素跟当前括号不匹配或者栈为空，即返回false\n* 最小栈[155. Min Stack](https://leetcode.com/problems/min-stack/)：构建一个最小栈的类，除了push/pop/top/以外，还可以返回栈内最小值 getMin（）。维护两个栈，一个用来正常存储，一个只在栈为空或者当前值小于等于栈最小值时才压入。压出时，如果正常栈压出的值等于最小栈的栈顶值，那么也跟着抛出\n* 每日温度[739. Daily Temperatures](https://leetcode.com/problems/daily-temperatures/)：求每个位置对应下一个比他大的温度出现在几天后。用单调栈，只维护比栈顶小的。当当前值小于栈顶时直接入栈。大于时while循环弹出所有比当前值小的，存储的是下标所以直接相减就行了\n* 数组中第k个最大元素[215. Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/)：维护一个k大小的最小堆，因为堆顶是最小的，然后放入前k个元素，当后续的元素比当前堆内大的时候，就弹出堆顶的元素，插入新值，这样最后堆顶最小的就是第k大的。\n* **%数组中前k个高频元素**[347. Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/) 返回前k高频的元素本身。一个map统计每个数字出现的次数，然后维护一个小根堆，注意比较方式应该是比较map.get(key)。大于堆顶元素的频次就替换，剩下的就是前k高频的.PriorityQueue<Integer> heap=new PriorityQueue<>(k,(a,b)->map.get(a)-map.get(b));\n* **%字符串解码**[394. Decode String](https://leetcode.com/problems/decode-string/) ：细节，``3[a2[c]]``解码成accaccacc。两个栈，一个存数字，一个存字符串。如果是数字则num=num* 10+(c-'0'); 如果是字母则 cur.append(c); 如果是左括号，则将两个参数分别压入各自的栈，并置0置空。如果是右括号，则弹出两个栈顶的值s_num,s_str, 手里的cur执行s_num遍，并和s_str进行拼接。 ","x":-2740,"y":1740,"width":1061,"height":400},
		{"id":"74754b150b6ea6dd","x":-2080,"y":-1630,"width":627,"height":228,"type":"text","text":"一维动态规划：\n通常状态可以用一个变量表示（位置，长度，容量）\n一维数组：\n  1. 一般只会依赖更小的i，dp[i-1] dp[i-2]\n  2. 有时需要依赖更前面的状态，这时需要遍历0～i之间去获得最优值（如最长递增子序列）\n"},
		{"id":"b36ba1c326b80520","x":-2882,"y":-1120,"width":670,"height":280,"type":"text","text":"子串问题：\n* **最长回文子串** [5. Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring/) ， 由于需要返回的是String，所以不是记录长度了，而是boolean dp二维数组，只有当 ``i,j位置的值相等且dp[i+1][j-1]是true或者`` j-i<=2 因为没有这个条件无法判断长度为2的字符串。\n*  最长回文子序列[516. Longest Palindromic Subsequence](https://leetcode.com/problems/longest-palindromic-subsequence/)  回文也是用二维dp数组，表示i-j之间最大的子序列长度。所以最后的结果在``dp[0][n-1]``, basecase 是 ``dp[i][i]`` =1, 如果string的i 和 j相等那么长度将增加到``dp[i+1][j-1]+2`` , 否则就保留``dp[i+1][j]或dp[i][j-1]``中最长的一个。由于每次判断需要i+1和j-1的位置已经确认好，所以需要调整循环顺序，主要就是i这倒序查询"},
		{"id":"daea98a6d1832bf3","x":-2882,"y":-1402,"width":670,"height":260,"type":"text","text":"二维数组遍历：\n* 最小路径和：[64. Minimum Path Sum](https://leetcode.com/problems/minimum-path-sum/) 从左上角只能向右或向下移动，求最小路径和。状态方程比较好写，只跟两个方向有关。这题不需要建m+1,n+1的dp数组，因为不需要``dp[0][j]和dp[i][0]``的含义\n*  所有路径：[62. Unique Paths](https://leetcode.com/problems/unique-paths/) 和上一题很像，寻找左上到右下的所有可能，状态转移方程改为``dp[i][j]=dp[i-1][j]+dp[i][j-1]``\n* 俄罗斯信封套娃，判断以二维数组表示长宽的信封能嵌套的个数。最长递增序列的变种，先对宽度进行升序排列，由于相同的长度不能嵌套，所以对长度相同的降序排列。然后对长度进行最长递增子序列进行查找。"},
		{"id":"410f39581087845d","x":-2080,"y":-840,"width":627,"height":398,"type":"text","text":"二维动态规划：\n状态通常需要两个变量才能完全描述问题\n  1. 背包问题：前i个元素和背包容量为j（0/1背包，完全背包）\n  2. 序列问题：A[0...i]和B[0....j]之间某种关系的最优解（最长公共子序列，编辑距离）\n  3. 从（i，j）位置出发或到达（i，j）位置的最优解 （最小路径和，不同路径）\n  4. 字符串本身子串s[i...j]的性质（回文子串，回文子序列）\n     \n二维数组：\n* 通常依赖于相邻行或列：如``dp[i-1][j],dp[i][j-1],dp[i-1][j-1]``\n* 同一行或列中更小的索引 如 ``dp[i][k] (k<j)``\n* 多个状态组合的极值 ``max(dp[i-1][j],dp[i-1][j-weight[i]+value[i]])``"},
		{"id":"6a95a6db454e487d","x":-2908,"y":-1960,"width":722,"height":518,"type":"text","text":"* **最长递增子序列** [300. Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/) 子序列不连续。dp[i]代表着以i结尾的最长子序列长度,初始值dp【i】=1，以每个i为终点，遍历前0～i-1的值，当nums[i]>nums[j]时，dp[i]=Math.max(dp[i],dp[j]+1)，然后再对dp[i]取最大值即可\n* 打家劫舍[198. House Robber](https://leetcode.com/problems/house-robber/)  小偷只能隔着偷，每个家的价值不一样，问最大价值多少。状态转移 ``dp[i]=Math.max(dp[i-2]+nums[i-1],dp[i-1]);`` 要么偷了就是前前个值加当前的价值，要么没偷，就保留i-1的结果\n* **最大乘积子数组**：[152. Maximum Product Subarray](https://leetcode.com/problems/maximum-product-subarray/) 如果是最大和。直接比较Math.max(nums[i],nums[i]+dp[i-1])即可。但是最大乘积会有负数变正数的可能。所以需要维护两个状态转移值，minN和maxN，当nums[i] 是负数时swap这两个值。并不断比较maxN和minN乘以当前num和只保留num的最大最小值，代表要前面的乘积值或者不要。\n* **单词划分** [139. Word Break](https://leetcode.com/problems/word-break/) ，返回一个字符串能否被提供的字典拼凑出来。如果``boolean dp[i]`` 代表以i结尾能否拼凑，状态转移方程就是 需要遍历前面的节点，找到前j是在字典里同时j～i也是的情况， ``dp[j]&&s.substring(j,i)`` .因为依赖前面字符串的状态，所以是两层循环。\n*  最大子数组和[53. Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)： dp【i】表示以i结尾的最大子数组和，``dp[i] = Math.max(dp[i-1]+nums[i],nums[i]);`` 或者用前缀和，然后类似最大股票差值的方式求也可以\n* 杨辉三角：[118. Pascal's Triangle](https://leetcode.com/problems/pascals-triangle/) 按照思路正常做即可，注意先new出来指定长度的list，它的cur.size()还是0，因为即使预先分配了，它的size返回的是当前有多少元素。"},
		{"id":"f0ae3b8b51660d9c","x":-2934,"y":-558,"width":701,"height":598,"type":"text","text":"背包问题：\n* **凑零钱**[322. Coin Change](https://leetcode.com/problems/coin-change/) ，完全背包问题，求凑到target的**最小硬币数量**。dp[i]表示amount是i时需要的最小硬币个数，dp【0】【i】是amount+1代表凑不了，状态转移方程就是dp[i]=Math.min(dp[i-coin]+1,dp[i])， 可以用二维做，但是状态转移只跟```\ndp[i-1][j],dp[i][j-coins[i-1]]+1``  有关，比较容易降到1维。\n*  0-1背包 ：经典的01背包问题需要找出这个背包**最多可以装多少价值**的物品。``dp[i][j]``表示前i个物品装到j空间的背包内的最大价值， 那么每次选择时的状态转移方程分两种，一个是装不下，那么只能不装``dp[i][j]=dp[i-1][j]`` ，要么就是 可装可不装，那么就取``dp[i-1][j]和dp[i-1][j-val[i-1]]+val[i-1]``的最大值\n* **完全背包问题**[518. Coin Change II](https://leetcode.com/problems/coin-change-ii/) 硬币可以重复使用，问凑到钱数有几种方式。 ``dp[i][j]``表示 i个物品放入j容量的背包里有几种方式。初始值dp【i】【0】=1表示0不用凑，。那么放得下，``dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]]`` 就是不放当前硬币的选项+放之后的选项，由于硬币可以重复，所以不是i-1。放不下那就是``dp[i][j]=dp[i-1][j]`` \n* **分割等和子集**：[416. Partition Equal Subset Sum](https://leetcode.com/problems/partition-equal-subset-sum/) 0-1背包的变种，要求判断能否将一个子集分成两个，并且元素和相等。可以理解为n个物品能否凑到sum/2的价值，所以用``boolean[][] dp``来维持状态，装不下，那么只能不装``dp[i][j]=dp[i-1][j]``，dp【i】【0】代表能分割所以是true ，要么就是 可装可不装，那么就取``dp[i-1][j]||dp[i-1][j-val[i-1]]`` 的布尔值\n* **完全平方数**[279. Perfect Squares](https://leetcode.com/problems/perfect-squares/) 完全背包。求一个数n最少可以由多少个平方数相加得到。可以转换成完全背包，``t*t`` 小于n的都存到list里，作为硬币，n就是需要凑的钱，硬币可以重复使用。dp[0]应该是0因为0不用凑，其他位置应该初始化为max 因为你要进行最小值的比较。然后当coin比当前容量大的时候``dp[i]=Math.min(dp[i],dp[i-coin]+1);``"},
		{"id":"8f2213d753a52f0c","x":-2934,"y":-800,"width":722,"height":242,"type":"text","text":"序列问题\n* 最长公共子序列：[1143. Longest Common Subsequence](https://leetcode.com/problems/longest-common-subsequence/) 不是公共子串。两个字符串比较所以需要二维dp。当两个字符相等时``dp[i][j]=dp[i-1][j-1]+1`` ，否则就是留``dp[i-1][j]和dp[i][j-1]``二者中最大的。不加1，因为没有匹配上。\n*  编辑距离[72. Edit Distance](https://leetcode.com/problems/edit-distance/)，两个字符串经过最少增删改步骤达到一致。设置dp【i】【j】代表0～i-1和0～j-1 字符串之间一致的最小步骤，base case dp[i][0 和 dp[0][j 都代表从空字符串到另一个字符串的距离，然后 如果s1[i== s2[j], dp[i] [j] = dp[i-1] [j-1], 不相等就是 dp[i-1][j],dp[i][jj-1],dp[i-1][j-1] 三者之间的最小值+1"},
		{"id":"f29679b27ace6505","type":"text","text":"常见函数工具","x":-1299,"y":2635,"width":250,"height":50},
		{"id":"b8ca1a81fdebb927","x":-1262,"y":2200,"width":176,"height":53,"type":"text","text":"二维矩阵"},
		{"id":"2638ad7d0f5005b8","type":"text","text":"* char[]转字符串：new String（char[]）\n* map<String, List>没有就创建一个新的list并存值：map.computeIfAbsent(key,k->new ArrayList<>()).add(sth)\n* map<String, List>只保留List的集合：new ArrayList<>(map.values());\n* 自定义priorityQueue比较规则：PriorityQueue<Integer> heap=new PriorityQueue<>(k,(a,b)->map.get(a)-map.get(b));","x":-2740,"y":2660,"width":940,"height":180},
		{"id":"984acf387f3ee6d0","x":-2740,"y":2180,"width":982,"height":430,"type":"text","text":"* 旋转输出矩阵[54. Spiral Matrix](https://leetcode.com/problems/spiral-matrix/) l,r,u,d分别定义四个边界，旋转打印矩阵。然后每次打完一行或一列后，判断是否已经到边界值，终止循环。\n* 二维数组置零 [73. Set Matrix Zeroes](https://leetcode.com/problems/set-matrix-zeroes/) 如果不强调O（1），可以两遍循环，第一遍用set 记录下那行那列有0，第二遍遍历的时候置零。如果强调O（1），可以用第一行第一列做一个标志列，首先遍历下第一行第一列，用两个flag去存第一行第一列本身有没有0.然后遍历的时候将有0的位置投影到第一行第一列。第二次循环时置零。\n* 搜索二维矩阵2 [240. Search a 2D Matrix II](https://leetcode.com/problems/search-a-2d-matrix-ii/) 跟1相比 不保证前一行的数比下一行都小。只保证行内增序，列向增序。暴力法就是每行二分。或者模拟成二叉树，在右上角的位置，左边的数都比自己小，下边的数都比自己大。从右上角的值和target进行比较小的话就减列，大的话就增行。\n* 岛屿数量[200. Number of Islands](https://leetcode.com/problems/number-of-islands/) 1代表岛屿，0代表海洋。双层循环找是1的位置开始dfs遍历，然后有一个isArea函数判断是否超出边界，当该位置是1是，四个方向dfs。每遍历到一个位置就把该位置改成2，表示已经遍历过了。岛屿数量就是每一个递归函数调用了就加1. 岛屿最大面积就是改成1+dfs（）四个方向。\n* **腐烂的橘子**[994. Rotting Oranges](https://leetcode.com/problems/rotting-oranges/) 0 代表空，1代表新鲜的橘子，2代表腐烂的橘子。问橘子全部腐烂需要几分钟。每分钟腐烂的橘子会向四周扩散。如果有腐烂不到的，返回-1. 沿用岛屿数量的思路，从2位置开始，多传一个time的参数，从2开始，每次dfs的时候就加1。dfs如果超出边界，或者不是新鲜的橘子且覆盖的腐烂时间小于当前时间的，直接返回。最后再双循环统计一遍，如果有还是1的，直接-1，要不遍历完，如果res还是初始值0，说明没有腐烂的路径，结果还是0，要不就是最大时间-2"},
		{"id":"e6754144b69ca327","type":"text","text":"* 反转二叉树[226. Invert Binary Tree](https://leetcode.com/problems/invert-binary-tree/)在前序位置调转左右子树\n* **二叉树右视角** [199. Binary Tree Right Side View](https://leetcode.com/problems/binary-tree-right-side-view/)和114拉平二叉树成链表类似，要求右子树的值，所以前序遍历时需要右在先，左在后。当从0开始的currDepth等于res.size时，说明刚到下一层，插入结果\n* 有序数组构建BST[108. Convert Sorted Array to Binary Search Tree](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/) 二分找一个中点作为root，左子树就是left～mid-1，右子树就是mid+1～right","x":380,"y":120,"width":840,"height":183}
	],
	"edges":[
		{"id":"1228db801a922ded","fromNode":"6ddcd031d61f4d0b","fromSide":"right","toNode":"9c81b642bee0b4f4","toSide":"left"},
		{"id":"0680398ee32c701d","fromNode":"9c81b642bee0b4f4","fromSide":"right","toNode":"405c431777f7b927","toSide":"left"},
		{"id":"397dcb7273b84e63","fromNode":"405c431777f7b927","fromSide":"right","toNode":"87803353733412dd","toSide":"left"},
		{"id":"4139668284747452","fromNode":"6ddcd031d61f4d0b","fromSide":"right","toNode":"924f0b7940f27e13","toSide":"left"},
		{"id":"ac2dffbcf7b50b24","fromNode":"924f0b7940f27e13","fromSide":"right","toNode":"719fe8835458f3a2","toSide":"left"},
		{"id":"e17b0aff6fb35df5","fromNode":"719fe8835458f3a2","fromSide":"right","toNode":"e6045e5226785de2","toSide":"left"},
		{"id":"ec339b247f42c7a1","fromNode":"6ddcd031d61f4d0b","fromSide":"right","toNode":"70866038af80733a","toSide":"left"},
		{"id":"d8b4a6b4b7721b19","fromNode":"6098a322c357c4a0","fromSide":"right","toNode":"ab18724322ff0deb","toSide":"left"},
		{"id":"3130ac66fe367796","fromNode":"7ae7ca3e114de40e","fromSide":"right","toNode":"8b002b0cfda44b53","toSide":"left"},
		{"id":"581a8fbc92f43878","fromNode":"cb876d74abb2b5eb","fromSide":"right","toNode":"f7b45ac031a9bd60","toSide":"left"},
		{"id":"9ec7c6e0ba35b257","fromNode":"70866038af80733a","fromSide":"right","toNode":"6098a322c357c4a0","toSide":"left"},
		{"id":"22cc47d90cb2524e","fromNode":"70866038af80733a","fromSide":"right","toNode":"cb876d74abb2b5eb","toSide":"left"},
		{"id":"f87ff38bf3e57764","fromNode":"70866038af80733a","fromSide":"right","toNode":"7ae7ca3e114de40e","toSide":"left"},
		{"id":"104596d0fa23343b","fromNode":"f7b45ac031a9bd60","fromSide":"right","toNode":"b35a70dc083c6c61","toSide":"left"},
		{"id":"c940c0d16822ea5d","fromNode":"6ddcd031d61f4d0b","fromSide":"right","toNode":"3bada3d47fd37c03","toSide":"left"},
		{"id":"6421049608bd871a","fromNode":"3bada3d47fd37c03","fromSide":"right","toNode":"d4d04856de282053","toSide":"left"},
		{"id":"488a09330cbb143b","fromNode":"3bada3d47fd37c03","fromSide":"right","toNode":"c8a37c6374427920","toSide":"left"},
		{"id":"531fa053b176f766","fromNode":"3bada3d47fd37c03","fromSide":"right","toNode":"55ac72c0d6e19ed7","toSide":"left"},
		{"id":"ca51f8b538de9bfb","fromNode":"55ac72c0d6e19ed7","fromSide":"right","toNode":"56d9935afa31d732","toSide":"left"},
		{"id":"71d467bfc89cf071","fromNode":"d4d04856de282053","fromSide":"right","toNode":"96a8edde13b2e89c","toSide":"left"},
		{"id":"2d558c1e29ddd17d","fromNode":"3bada3d47fd37c03","fromSide":"right","toNode":"b1d6f334c73e78c6","toSide":"left"},
		{"id":"5acc905ec51588f8","fromNode":"b1d6f334c73e78c6","fromSide":"right","toNode":"50dd33ee76d0007c","toSide":"left"},
		{"id":"d52ea1ae04e03314","fromNode":"4fdf4c9499f5eacb","fromSide":"right","toNode":"e112bac8f2492cc4","toSide":"left"},
		{"id":"efb72fbe86bd5b0c","fromNode":"8ccdf64b87d5311f","fromSide":"right","toNode":"06be2646f78aa93e","toSide":"left"},
		{"id":"9889f522ff29971c","fromNode":"e4644c22c03737b7","fromSide":"right","toNode":"5d5419f01eeb8e8d","toSide":"left"},
		{"id":"8ab39fe99a69915b","fromNode":"4d6e11e191577890","fromSide":"right","toNode":"4fdf4c9499f5eacb","toSide":"left"},
		{"id":"cbcafe5c55340ffd","fromNode":"4d6e11e191577890","fromSide":"right","toNode":"8ccdf64b87d5311f","toSide":"left"},
		{"id":"b99e28d80d9847f8","fromNode":"4d6e11e191577890","fromSide":"right","toNode":"e4644c22c03737b7","toSide":"left"},
		{"id":"cc32f0a5199b7647","fromNode":"4d6e11e191577890","fromSide":"right","toNode":"b9e263537a54dd38","toSide":"left"},
		{"id":"0d69449596bd3415","fromNode":"b9e263537a54dd38","fromSide":"right","toNode":"cf049d5dce67725a","toSide":"left"},
		{"id":"c53b41c431df51a6","fromNode":"4d6e11e191577890","fromSide":"right","toNode":"b7c0588019625296","toSide":"left"},
		{"id":"9d526aef6575975b","fromNode":"b7c0588019625296","fromSide":"right","toNode":"71cadbb9d498ac4c","toSide":"left"},
		{"id":"4282fc96b0442cb9","fromNode":"8b002b0cfda44b53","fromSide":"right","toNode":"e3281db52425f113","toSide":"left"},
		{"id":"6d6ad0f10b671cb1","fromNode":"ab18724322ff0deb","fromSide":"right","toNode":"e6754144b69ca327","toSide":"left"},
		{"id":"0621fc935127a1a0","fromNode":"70866038af80733a","fromSide":"right","toNode":"4df63548f8dcc255","toSide":"left"},
		{"id":"5a077a6f92eadf40","fromNode":"4df63548f8dcc255","fromSide":"right","toNode":"6218f59ed823ac20","toSide":"left"},
		{"id":"2c86cb32a470369e","fromNode":"4df63548f8dcc255","fromSide":"right","toNode":"4b2ea63f7734a1cd","toSide":"left"},
		{"id":"e856c3a5a2ffa277","fromNode":"6218f59ed823ac20","fromSide":"right","toNode":"39cba020edf3935e","toSide":"left"},
		{"id":"93949317b5017b51","fromNode":"4b2ea63f7734a1cd","fromSide":"right","toNode":"0e95b946d2ed4a34","toSide":"left"},
		{"id":"183f7a4c0f5b6ce3","fromNode":"4df63548f8dcc255","fromSide":"right","toNode":"b2076240e2f2a784","toSide":"left"},
		{"id":"8a41a05d8e62358f","fromNode":"b2076240e2f2a784","fromSide":"right","toNode":"34e79651438ad19b","toSide":"left"},
		{"id":"a153d4d4435a34e9","fromNode":"70866038af80733a","fromSide":"right","toNode":"f5b2827293468258","toSide":"left"},
		{"id":"89241fbc8a0a7b98","fromNode":"f5b2827293468258","fromSide":"right","toNode":"0d899fd56e77b87f","toSide":"left"},
		{"id":"2399c20d322206e9","fromNode":"cf049d5dce67725a","fromSide":"right","toNode":"adfb2dcd0eb1cd31","toSide":"left"},
		{"id":"6a3d406279084b64","fromNode":"70866038af80733a","fromSide":"right","toNode":"2355c0d12239abbf","toSide":"left"},
		{"id":"f4e30100c8706572","fromNode":"2355c0d12239abbf","fromSide":"right","toNode":"3bf105c8d7694a72","toSide":"left"},
		{"id":"8a29a1d298b540ba","fromNode":"6ddcd031d61f4d0b","fromSide":"right","toNode":"4d6e11e191577890","toSide":"left"},
		{"id":"33bfb87f5346338f","fromNode":"71cadbb9d498ac4c","fromSide":"right","toNode":"f6134d84ee6fd4c6","toSide":"left"},
		{"id":"3a4c44a88a6b5325","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"2da5691f54cf39a0","toSide":"right"},
		{"id":"871bfc66d84c3fef","fromNode":"1374fd460d1c5fd9","fromSide":"left","toNode":"4ca0d635f3f84ad8","toSide":"right"},
		{"id":"cce96343a9b5794e","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"1374fd460d1c5fd9","toSide":"right"},
		{"id":"cdacd3bfceb918f2","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"333eff538c6562bc","toSide":"right"},
		{"id":"66ed5c3cb94dcb6f","fromNode":"333eff538c6562bc","fromSide":"left","toNode":"125f5762ffe49278","toSide":"right"},
		{"id":"77431e3aca8d09ee","fromNode":"1e5f0cafd82fa973","fromSide":"left","toNode":"95882fa23ac218a8","toSide":"right"},
		{"id":"220f19a627ada93d","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"1e5f0cafd82fa973","toSide":"right"},
		{"id":"acfa58dc01ded3dc","fromNode":"e27bfca1c9854b1c","fromSide":"left","toNode":"9f73434033420921","toSide":"right"},
		{"id":"fd75cd1f59afe665","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"e27bfca1c9854b1c","toSide":"right"},
		{"id":"8532bb558da17fe6","fromNode":"ba83179a6667600a","fromSide":"left","toNode":"6d71db626df514d7","toSide":"right"},
		{"id":"6076c21470164e9f","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"ba83179a6667600a","toSide":"right"},
		{"id":"e85b0e2f01bb6379","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"f29679b27ace6505","toSide":"right"},
		{"id":"e4d1bfc9c565a7a6","fromNode":"f29679b27ace6505","fromSide":"left","toNode":"2638ad7d0f5005b8","toSide":"right"},
		{"id":"bb6980fb57438d59","fromNode":"2da5691f54cf39a0","fromSide":"left","toNode":"410f39581087845d","toSide":"right"},
		{"id":"738c8876cfb230f9","fromNode":"2da5691f54cf39a0","fromSide":"left","toNode":"74754b150b6ea6dd","toSide":"right"},
		{"id":"6f84d8d74b2e5988","fromNode":"410f39581087845d","fromSide":"left","toNode":"8f2213d753a52f0c","toSide":"right"},
		{"id":"3e03126af2c3af83","fromNode":"74754b150b6ea6dd","fromSide":"left","toNode":"6a95a6db454e487d","toSide":"right"},
		{"id":"53831028a2963c9c","fromNode":"410f39581087845d","fromSide":"left","toNode":"f0ae3b8b51660d9c","toSide":"right"},
		{"id":"908765e5ab847587","fromNode":"410f39581087845d","fromSide":"left","toNode":"daea98a6d1832bf3","toSide":"right"},
		{"id":"be5ac2ce46f65547","fromNode":"410f39581087845d","fromSide":"left","toNode":"b36ba1c326b80520","toSide":"right"},
		{"id":"1ec1b1e68ba251cc","fromNode":"6ddcd031d61f4d0b","fromSide":"left","toNode":"b8ca1a81fdebb927","toSide":"right"},
		{"id":"4ae7310f80968517","fromNode":"b8ca1a81fdebb927","fromSide":"left","toNode":"984acf387f3ee6d0","toSide":"right"}
	]
}